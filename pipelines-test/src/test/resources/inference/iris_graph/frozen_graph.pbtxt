node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "IteratorFromStringHandle"
  op: "IteratorFromStringHandle"
  input: "Placeholder"
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorFromStringHandle"
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "dense/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 10
          }
        }
        tensor_content: "\234\342\356>\361[\347>\034D\025\277q[\337\275\272c\027>3\323\n?\001\302\221\276\352C\316\276oD\271=\023b\210\276\322\372\347= \323)\277`\235V>6>\002>\326\3142?\211I\270=|\2714?\030\210\277\275\226\212\225\275\327R2<\350\226o>\226\311m>\273\266(?\333N\361>Yp\004\276\177\217\224\276\211\3116?\325X\360\276\254\314\034?b\212\013>\242\3731>p\366\216>\372\267\266>\264\212\\\276\246q\000\277\361\032\023\277_C\353\276\346\321/\276\225\033\222=\016;\226>"
      }
    }
  }
}
node {
  name: "dense/kernel/read"
  op: "Identity"
  input: "dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/kernel"
      }
    }
  }
}
node {
  name: "dense/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        tensor_content: "\357~(>\322\344G\276T\357\251\272\234\305\006\276\323\353)>\314\322)>\002\240F;\000\000\000\000\007\246\024\276Y+\217\274"
      }
    }
  }
}
node {
  name: "dense/bias/read"
  op: "Identity"
  input: "dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense/bias"
      }
    }
  }
}
node {
  name: "dense/MatMul"
  op: "MatMul"
  input: "IteratorGetNext"
  input: "dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense/BiasAdd"
  op: "BiasAdd"
  input: "dense/MatMul"
  input: "dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense/Relu"
  op: "Relu"
  input: "dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 20
          }
        }
        tensor_content: "\3324\006?`?\365>\274\245\373\275\3408Q\275G\371\002\276\235\002\303\276\226J\375\274\232s>>L\211\236>\024[\252>dS2\275\371\2669=\024\271\360\27520\227\276_V\354>\323|K>\256\334\304>\240\n\231>Q/+>\276\232\014\2767\2212\276\242I\247=\230\001@=\220J^=#\267\255\276\002\033-\276eL\210\275\372\223\001\277\223F\276=A\032\327\276I\304\216\276\226-\300>\230\014\210=$\227\333\275\271\236&\276\364\337\035>\302\313m\276.\003\025\276\034]\312\276l\301\261\276M\3532\276\252\365g\276\034`@>\240\320q\274g\311\027\277\200\264\002;\320\362,\275\356J\260\274\350\353\277=\376.\355\276\227\255\023\277\213&(\277\030W\212>(\244\231>7\357\276=\371U\342>\031\260M=\010\367A=\250\347\344=\004\331\013>\023\270\263=\020\332\211\276\260\306\242<\240\313\231\275\261\307\253\276\n\206\334\276\326\032_>\3141X>\326\312?\275!\241\267>F\323I\276$\r\232\276\360\246\335\2744\366{>#\340b>\010/\235>\r\220\276\276x\021b>\256qo>\2318\265\276\241tK\276\212\025\230=\372A0\276\260\262\306\275\023\306\020?o4\231>\304\215\300\276\250C\340\275\00625=v~\231>5\231\013?j\251\220>\360\346X\275\200\002\320=\337;\250>3P\220\276w#\243>>\263\322\276\243Y\372>\020vl=x\2778=b\256c\274\000\330\026\273\016\305\031\276\213S\264>T\3112>\222Q\211\274\033@\274>\302\004\324\276\022\304\332=jR\213>\274\312\367>R\345.\276\240\033\336<\332j\342>{\212\203\276\264\352p>b\006\215>\026\232\311>\340\2729<\372A?=`\211t\272\224\364\225>\032n\322>\270\301\206=b\257\203=\353\273\344>T@\233=\336%\313>\233v\264\276\237%\310>\357m\230>\004\373\357\275\324\252\211\275;\204w=\225G\231>Zd\315>d\343{\276F\246\244\276\036\316\214>\233D\257\276\205\350\210\276dE\265\275\330\216\016>\364\271\323>\344\031\347\275`\351x>\240\333\001\275\204\356\323>\354j\246\276\320p\261\276\370\246\261\276XU\037\276\304-\350\275XS\215\276\301D\333\276\260T\343=\246F\233>\234\2522>\232`(\276\343f\304>\225\354\023>\010PZ\276\223\036\344\276\025kD\276r\234\232>\013\247\265>\346:\264\276hb\227>\276J\\\275\236B\020\276\020t\341\27661C\276@\274\006>d\353\271>:\304@>-\266\323\276\006 \301\276f\2508\276\314\321\305\276\306j\323=\030UP\276F}\226>Q\213\304\276(b\215=\305\374\265\276\250\276\275\275\\\226\304>mK\333\276\374\271\271>\255\210\200\276\353\224\246>#w\266\276=\225z\276\301\365\207\276\036^\245\276\271g\006\276xf>\2750\305\200>\220\no>"
      }
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        tensor_content: "\314@\n>\321\005\310=\000\000\000\000\000\000\000\000\230\223\010>WC\014\275\267\337f<@\231o=\t[\253\275\350\374!>\252\033O>\247\331\331=\000\000\000\000\000\000\000\000\037\250\271=C\033\364\275v\227\000>\000\000\000\000\034:6>\000\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_2/MatMul"
  op: "MatMul"
  input: "dense/Relu"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_2/BiasAdd"
  op: "BiasAdd"
  input: "dense_2/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_2/Relu"
  op: "Relu"
  input: "dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 10
          }
        }
        tensor_content: "\337\221}\275\025G9\275\242xv\276Ja\340=`B\247\276-\331@>\270=(?m\326\261\274\276\374I>\177 \002\276{\237\004\276\214\260P:\200\362i>\023\222\027>\250\2156>\022\205\322=\025\010\014?\313r\303\275\260\364\366=\307\343\307\276D\342\'>\260\363I=h\251\027>\234\226\017>R|\324>\216\353\316>\370 \213>\334\216G\276\220A6>(%\226=\034\334\322>t8\243>H\311\313>0\227c>\254)\255>y\310z\276c\275\332\2762\360\316>.\252\242\276R\214\273>6\004\240>\353O\032?9\224\237\276\317\377/>\n\tD>N\363\261>\031\261\247\276\260wm>#\221\032>x\276\225>\215\313\004\275\212\3102>\352\307\236\276\006>\357\276z\347\241=j\242\356>\346\305\276\276S\317\220>\242t3=\352c\246\276\037]\021\276L\236\246\275Upf\275|\272\363>>j\314>\254\266K\276\037\033\377>\325\313\344>\343x1>\251\031\"\276\355\356\235>\372\371\'\276\270\246\267\276\245\202\345\276<\t\271>\2319\253>\310\264\017\277k\361.\276\302>\265=o\350\263>~\375F\276\226\341\t>\2400\224\275\3704\247>R3_>^u\342\276,\274\247>b\352\202\276\315\304\033\276)\234h\276\224\334/>0\200\371>?\221\226>@\036%\277e\037*>\341\230\315\275D\340\004>\201\347\240\276\241\271\030>\273?]>J\255\351><v@>*\374A?[\177\302\276\004\321\026>\306H%>\243\224\207\276m\tH\277\304\202\354\275\233\244\210\275~\0264\274\254\204\371>\001\270\223>\214/\275\276l\271\303\2767e5\274^f\305=\252\202\207\275K\2605>\235\346\010\276\234q\224>\000\210\234\2767\237\215\276D\253\323\276\000\324\343>\200W\202>\246\220\211>\310/r\275@-\345<hiG\276\324l\221>\250\211\246>\340O\216\276\302\365\256>S\032\255\276FO\243\276\230L8\275(\322\227=\r\024\315\276\000\316e<Z\317\316>\356\262.>\232K0>4O\037=\360\267I\276\254\366\255\275\262\274\304\273\333\225\275>\203/\216\276/\332\336=\010\201\367\276D\246\225>\213\346\221\276\261\230\000?\305\202\325>R\200\205\276@\230u>\227l\020?\034\022\270\276\244\366\210>L)\010? r\006?\305\342\207>s\024\276\275\304\361\224=\354\224\004?%\207\264>\3230\016\277\372\370\206>\267<\263> \302\312=b\202C\276\3056\260\276\034\246\237\276\021U\210\276\334\347\332\276\010\241\254=\325\356\312\276\312y\312>\221<d\276\337\357i>\227I ?\303\336\305>\201y)\277\344$\031\277\342\227\215=I]\223\276Uz\206\275(\374\003?\211\341\020?\360\256\341>\230\304\022>\000&\230=\364\223\014>\234\376h>\370+\001\275\342l|\276^f\002\276\270\334\010=\200\345\303>"
      }
    }
  }
}
node {
  name: "dense_2/kernel/read"
  op: "Identity"
  input: "dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
}
node {
  name: "dense_2/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        tensor_content: "\004m\277=\3146`<\001G\372=\014f0\275.cD\275\315\272\230=.\376O>\3467\026\275\214\222\333\275\177\332\207<"
      }
    }
  }
}
node {
  name: "dense_2/bias/read"
  op: "Identity"
  input: "dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
}
node {
  name: "dense_3/MatMul"
  op: "MatMul"
  input: "dense_2/Relu"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_3/BiasAdd"
  op: "BiasAdd"
  input: "dense_3/MatMul"
  input: "dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_3/Relu"
  op: "Relu"
  input: "dense_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_3/kernel"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 3
          }
        }
        tensor_content: "^LH?\320\223\265\273x\367<\277\230\237\016=^m\207\275\013}\202\276\366\364y>\373\326\326>\344\026K\277\321\230\262\276\277Z*\277\342\352+?\354_\231=\034\217^\277\227\225e\276[\241T?\"\256\214\275\373\246\326\276\301\342^\277)\314\342>\301\355>=\300\302\221=\225^?\275\346+M?\213!\207>\312]\013\2772I\230>\262\251a\276\\\016$\277k\227\237\276"
      }
    }
  }
}
node {
  name: "dense_3/kernel/read"
  op: "Identity"
  input: "dense_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/kernel"
      }
    }
  }
}
node {
  name: "dense_3/bias"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "M\375_\273S\231\022<\232| \275"
      }
    }
  }
}
node {
  name: "dense_3/bias/read"
  op: "Identity"
  input: "dense_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_3/bias"
      }
    }
  }
}
node {
  name: "dense_4/MatMul"
  op: "MatMul"
  input: "dense_3/Relu"
  input: "dense_3/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_4/BiasAdd"
  op: "BiasAdd"
  input: "dense_4/MatMul"
  input: "dense_3/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_4/Softmax"
  op: "Softmax"
  input: "dense_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "output/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "output"
  op: "ArgMax"
  input: "dense_4/Softmax"
  input: "output/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
library {
  function {
    signature {
      name: "tf_map_func_65aa888d"
      input_arg {
        name: "arg0"
        type: DT_STRING
      }
      output_arg {
        name: "stack"
        type: DT_FLOAT
      }
      output_arg {
        name: "DecodeCSV_o4"
        type: DT_FLOAT
      }
      description: "A wrapper for Defun that facilitates shape inference."
    }
    node_def {
      name: "DecodeCSV/record_defaults_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV/record_defaults_4"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "DecodeCSV"
      op: "DecodeCSV"
      input: "arg0"
      input: "DecodeCSV/record_defaults_0:output:0"
      input: "DecodeCSV/record_defaults_1:output:0"
      input: "DecodeCSV/record_defaults_2:output:0"
      input: "DecodeCSV/record_defaults_3:output:0"
      input: "DecodeCSV/record_defaults_4:output:0"
      attr {
        key: "OUT_TYPE"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "field_delim"
        value {
          s: ","
        }
      }
      attr {
        key: "na_value"
        value {
          s: ""
        }
      }
      attr {
        key: "use_quote_delim"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "stack"
      op: "Pack"
      input: "DecodeCSV:output:0"
      input: "DecodeCSV:output:1"
      input: "DecodeCSV:output:2"
      input: "DecodeCSV:output:3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    ret {
      key: "DecodeCSV_o4"
      value: "DecodeCSV:output:4"
    }
    ret {
      key: "stack"
      value: "stack:output:0"
    }
  }
  function {
    signature {
      name: "_make_dataset_32427efb"
      output_arg {
        name: "BatchDataset"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "TextLineDataset/filenames"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "/home/agibsonccc/code/TFOpTests/scratch_space/iris_training.csv"
          }
        }
      }
    }
    node_def {
      name: "TextLineDataset/compression_type"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "TextLineDataset/buffer_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 262144
          }
        }
      }
    }
    node_def {
      name: "TextLineDataset"
      op: "TextLineDataset"
      input: "TextLineDataset/filenames:output:0"
      input: "TextLineDataset/compression_type:output:0"
      input: "TextLineDataset/buffer_size:output:0"
    }
    node_def {
      name: "MapDataset"
      op: "MapDataset"
      input: "TextLineDataset:handle:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "tf_map_func_65aa888d"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/buffer_size_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 200
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset"
      op: "ShuffleDataset"
      input: "MapDataset:handle:0"
      input: "ShuffleDataset/buffer_size_1:output:0"
      input: "ShuffleDataset/seed:output:0"
      input: "ShuffleDataset/seed2:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "RepeatDataset/count"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset"
      op: "RepeatDataset"
      input: "ShuffleDataset:handle:0"
      input: "RepeatDataset/count:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "BatchDataset/batch_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 32
          }
        }
      }
    }
    node_def {
      name: "BatchDataset"
      op: "BatchDataset"
      input: "RepeatDataset:handle:0"
      input: "BatchDataset/batch_size:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    ret {
      key: "BatchDataset"
      value: "BatchDataset:handle:0"
    }
  }
  function {
    signature {
      name: "_make_dataset_e7c4499e"
      output_arg {
        name: "BatchDataset"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "TextLineDataset/filenames_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "/home/agibsonccc/code/TFOpTests/scratch_space/iris_test.csv"
          }
        }
      }
    }
    node_def {
      name: "TextLineDataset/compression_type_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
    }
    node_def {
      name: "TextLineDataset/buffer_size_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 262144
          }
        }
      }
    }
    node_def {
      name: "TextLineDataset"
      op: "TextLineDataset"
      input: "TextLineDataset/filenames_1:output:0"
      input: "TextLineDataset/compression_type_1:output:0"
      input: "TextLineDataset/buffer_size_2:output:0"
    }
    node_def {
      name: "MapDataset"
      op: "MapDataset"
      input: "TextLineDataset:handle:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "tf_map_func_65aa888d"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/buffer_size_3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 200
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed2_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset"
      op: "ShuffleDataset"
      input: "MapDataset:handle:0"
      input: "ShuffleDataset/buffer_size_3:output:0"
      input: "ShuffleDataset/seed_1:output:0"
      input: "ShuffleDataset/seed2_1:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "RepeatDataset/count_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset"
      op: "RepeatDataset"
      input: "ShuffleDataset:handle:0"
      input: "RepeatDataset/count_1:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "BatchDataset/batch_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 32
          }
        }
      }
    }
    node_def {
      name: "BatchDataset"
      op: "BatchDataset"
      input: "RepeatDataset:handle:0"
      input: "BatchDataset/batch_size:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    ret {
      key: "BatchDataset"
      value: "BatchDataset:handle:0"
    }
  }
}
